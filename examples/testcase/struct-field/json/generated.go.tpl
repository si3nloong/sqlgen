// Code generated by sqlgen, version v1.0.0-beta.1; DO NOT EDIT.

package json

import (
	"encoding/json"

	"github.com/si3nloong/sqlgen/sequel"
	"github.com/si3nloong/sqlgen/sequel/encoding"
)

func (JSON) TableName() string {
	return "json"
}
func (JSON) Columns() []string {
	return []string{"num", "raw_bytes"} // 2
}
func (v JSON) Values() []any {
	return []any{
		v.Num.String(), // 0 - num
		v.RawBytes,     // 1 - raw_bytes
	}
}
func (v *JSON) Addrs() []any {
	return []any{
		Number(&v.Num), // 0 - num
		encoding.StringScanner[json.RawMessage](&v.RawBytes), // 1 - raw_bytes
	}
}
func (JSON) InsertPlaceholders(row int) string {
	return "(?,?)" // 2
}
func (v JSON) InsertOneStmt() (string, []any) {
	return "INSERT INTO `json` (`num`,`raw_bytes`) VALUES (?,?);", v.Values()
}
func (v JSON) NumValue() any {
	return v.Num.String()
}
func (v JSON) RawBytesValue() any {
	return v.RawBytes
}
func (v JSON) ColumnNum() sequel.ColumnConvertClause[json.Number] {
	return sequel.Column("num", v.Num, func(val json.Number) any {
		return val.String()
	})
}
func (v JSON) ColumnRawBytes() sequel.ColumnConvertClause[json.RawMessage] {
	return sequel.Column("raw_bytes", v.RawBytes, func(val json.RawMessage) any {
		return val
	})
}
