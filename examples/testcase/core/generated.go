// Code generated by sqlgen. DO NOT EDIT.

package core

import (
	"reflect"
	"time"

	"github.com/si3nloong/sqlgen/sequel"
	"github.com/si3nloong/sqlgen/sequel/encoding"
	"github.com/si3nloong/sqlgen/sequel/sqltype"
)

func (User) TableName() string {
	return "user"
}
func (User) HasPK()      {}
func (User) IsAutoIncr() {}
func (v *User) ScanAutoIncr(val int64) error {
	v.ID = int64(val)
	return nil
}
func (v User) PK() (string, int, any) {
	return "id", 0, v.ID
}
func (User) Columns() []string {
	return []string{"id", "no", "joined_time", "address", "kind", "type", "chan", "postal_code", "extra_info", "nicknames", "slice", "map", "nested", "t", "name"} // 15
}
func (v User) Values() []any {
	return []any{
		v.ID,                                     //  0 - id
		(int64)(v.No),                            //  1 - no
		v.JoinedTime,                             //  2 - joined_time
		encoding.JSONValue(v.Address),            //  3 - address
		(int64)(v.Kind),                          //  4 - kind
		(int64)(v.Type),                          //  5 - type
		(int64)(v.Chan),                          //  6 - chan
		v.PostalCodeValue(),                      //  7 - postal_code
		encoding.JSONValue(v.ExtraInfo),          //  8 - extra_info
		encoding.JSONValue(v.Nicknames),          //  9 - nicknames
		(sqltype.Float64Slice[float64])(v.Slice), // 10 - slice
		encoding.JSONValue(v.Map),                // 11 - map
		v.NestedValue(),                          // 12 - nested
		v.embed.T,                                // 13 - t
		v.NameValue(),                            // 14 - name
	}
}
func (v *User) Addrs() []any {
	if v.PostalCode == nil {
		v.PostalCode = new(string)
	}
	if v.embed.Nested == nil {
		v.embed.Nested = new(struct{ Deep struct{ Bool bool } })
	}
	if v.embed.deepNested == nil {
		v.embed.deepNested = new(deepNested)
	}
	return []any{
		&v.ID,                             //  0 - id
		encoding.UintScanner[uint](&v.No), //  1 - no
		&v.JoinedTime,                     //  2 - joined_time
		encoding.JSONScanner(&v.Address),  //  3 - address
		encoding.UintScanner[reflect.Kind](&v.Kind),   //  4 - kind
		encoding.Uint8Scanner[HouseUnitType](&v.Type), //  5 - type
		encoding.IntScanner[reflect.ChanDir](&v.Chan), //  6 - chan
		encoding.StringScanner[string](&v.PostalCode), //  7 - postal_code
		encoding.JSONScanner(&v.ExtraInfo),            //  8 - extra_info
		encoding.JSONScanner(&v.Nicknames),            //  9 - nicknames
		(*sqltype.Float64Slice[float64])(&v.Slice),    // 10 - slice
		encoding.JSONScanner(&v.Map),                  // 11 - map
		encoding.JSONScanner(&v.embed.Nested),         // 12 - nested
		&v.embed.T,                                    // 13 - t
		&v.embed.deepNested.Name,                      // 14 - name
	}
}
func (User) InsertColumns() []string {
	return []string{"no", "joined_time", "address", "kind", "type", "chan", "postal_code", "extra_info", "nicknames", "slice", "map", "nested", "t", "name"} // 14
}
func (User) InsertPlaceholders(row int) string {
	return "(?,?,?,?,?,?,?,?,?,?,?,?,?,?)" // 14
}
func (v User) InsertOneStmt() (string, []any) {
	return "INSERT INTO `user` (`no`,`joined_time`,`address`,`kind`,`type`,`chan`,`postal_code`,`extra_info`,`nicknames`,`slice`,`map`,`nested`,`t`,`name`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?);", []any{(int64)(v.No), v.JoinedTime, encoding.JSONValue(v.Address), (int64)(v.Kind), (int64)(v.Type), (int64)(v.Chan), v.PostalCodeValue(), encoding.JSONValue(v.ExtraInfo), encoding.JSONValue(v.Nicknames), (sqltype.Float64Slice[float64])(v.Slice), encoding.JSONValue(v.Map), v.NestedValue(), v.embed.T, v.NameValue()}
}
func (v User) FindOneByPKStmt() (string, []any) {
	return "SELECT `id`,`no`,`joined_time`,`address`,`kind`,`type`,`chan`,`postal_code`,`extra_info`,`nicknames`,`slice`,`map`,`nested`,`t`,`name` FROM `user` WHERE `id` = ? LIMIT 1;", []any{v.ID}
}
func (v User) UpdateOneByPKStmt() (string, []any) {
	return "UPDATE `user` SET `no` = ?,`joined_time` = ?,`address` = ?,`kind` = ?,`type` = ?,`chan` = ?,`postal_code` = ?,`extra_info` = ?,`nicknames` = ?,`slice` = ?,`map` = ?,`nested` = ?,`t` = ?,`name` = ? WHERE `id` = ?;", []any{(int64)(v.No), v.JoinedTime, encoding.JSONValue(v.Address), (int64)(v.Kind), (int64)(v.Type), (int64)(v.Chan), v.PostalCodeValue(), encoding.JSONValue(v.ExtraInfo), encoding.JSONValue(v.Nicknames), (sqltype.Float64Slice[float64])(v.Slice), encoding.JSONValue(v.Map), v.NestedValue(), v.embed.T, v.NameValue(), v.ID}
}
func (v User) IDValue() any {
	return v.ID
}
func (v User) NoValue() any {
	return (int64)(v.No)
}
func (v User) JoinedTimeValue() any {
	return v.JoinedTime
}
func (v User) AddressValue() any {
	return encoding.JSONValue(v.Address)
}
func (v User) KindValue() any {
	return (int64)(v.Kind)
}
func (v User) TypeValue() any {
	return (int64)(v.Type)
}
func (v User) ChanValue() any {
	return (int64)(v.Chan)
}
func (v User) PostalCodeValue() any {
	if v.PostalCode != nil {
		return *v.PostalCode
	}
	return nil
}
func (v User) ExtraInfoValue() any {
	return encoding.JSONValue(v.ExtraInfo)
}
func (v User) NicknamesValue() any {
	return encoding.JSONValue(v.Nicknames)
}
func (v User) SliceValue() any {
	return (sqltype.Float64Slice[float64])(v.Slice)
}
func (v User) MapValue() any {
	return encoding.JSONValue(v.Map)
}
func (v User) NestedValue() any {
	if v.embed.Nested != nil {
		return encoding.JSONValue(*v.embed.Nested)
	}
	return nil
}
func (v User) TValue() any {
	return v.embed.T
}
func (v User) NameValue() any {
	if v.embed.deepNested != nil {
		return v.embed.deepNested.Name
	}
	return nil
}
func (v User) ColumnID() sequel.ColumnClause[int64] {
	return sequel.BasicColumn("id", v.ID)
}
func (v User) ColumnNo() sequel.ColumnConvertClause[uint] {
	return sequel.Column("no", v.No, func(val uint) any {
		return (int64)(val)
	})
}
func (v User) ColumnJoinedTime() sequel.ColumnClause[time.Time] {
	return sequel.BasicColumn("joined_time", v.JoinedTime)
}
func (v User) ColumnAddress() sequel.ColumnConvertClause[Address] {
	return sequel.Column("address", v.Address, func(val Address) any {
		return encoding.JSONValue(val)
	})
}
func (v User) ColumnKind() sequel.ColumnConvertClause[reflect.Kind] {
	return sequel.Column("kind", v.Kind, func(val reflect.Kind) any {
		return (int64)(val)
	})
}
func (v User) ColumnType() sequel.ColumnConvertClause[HouseUnitType] {
	return sequel.Column("type", v.Type, func(val HouseUnitType) any {
		return (int64)(val)
	})
}
func (v User) ColumnChan() sequel.ColumnConvertClause[reflect.ChanDir] {
	return sequel.Column("chan", v.Chan, func(val reflect.ChanDir) any {
		return (int64)(val)
	})
}
func (v User) ColumnPostalCode() sequel.ColumnConvertClause[*string] {
	return sequel.Column("postal_code", v.PostalCode, func(val *string) any {
		if val != nil {
			return *val
		}
		return nil
	})
}

type UserExtraInfoInlineStruct = struct {
	Flag bool
}

func (v User) ColumnExtraInfo() sequel.ColumnConvertClause[UserExtraInfoInlineStruct] {
	return sequel.Column("extra_info", v.ExtraInfo, func(val UserExtraInfoInlineStruct) any {
		return encoding.JSONValue(val)
	})
}
func (v User) ColumnNicknames() sequel.ColumnConvertClause[[2]string] {
	return sequel.Column("nicknames", v.Nicknames, func(val [2]string) any {
		return encoding.JSONValue(val)
	})
}
func (v User) ColumnSlice() sequel.ColumnConvertClause[[]float64] {
	return sequel.Column("slice", v.Slice, func(val []float64) any {
		return (sqltype.Float64Slice[float64])(val)
	})
}
func (v User) ColumnMap() sequel.ColumnConvertClause[map[string]float64] {
	return sequel.Column("map", v.Map, func(val map[string]float64) any {
		return encoding.JSONValue(val)
	})
}
func (v User) ColumnNested() sequel.ColumnConvertClause[*struct{ Deep struct{ Bool bool } }] {
	return sequel.Column("nested", v.embed.Nested, func(val *struct{ Deep struct{ Bool bool } }) any {
		if val != nil {
			return encoding.JSONValue(*val)
		}
		return nil
	})
}
func (v User) ColumnT() sequel.ColumnClause[time.Time] {
	return sequel.BasicColumn("t", v.embed.T)
}
func (v User) ColumnName() sequel.ColumnClause[string] {
	return sequel.BasicColumn("name", v.embed.deepNested.Name)
}
