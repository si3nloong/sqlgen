// Code generated by sqlgen, version v1.1.0-alpha. DO NOT EDIT.

package schema

import (
	"database/sql"
	"database/sql/driver"
	"time"

	"github.com/si3nloong/sqlgen/sequel"
	"github.com/si3nloong/sqlgen/sequel/types"
)

func (v A) CreateTableStmt() string {
	return "CREATE TABLE IF NOT EXISTS " + v.TableName() + " (`id` VARCHAR(255) NOT NULL,`text` VARCHAR(255) NOT NULL,`created_at` DATETIME NOT NULL);"
}
func (A) AlterTableStmt() string {
	return "ALTER TABLE `a` MODIFY `id` VARCHAR(255) NOT NULL,MODIFY `text` VARCHAR(255) NOT NULL AFTER `id`,MODIFY `created_at` DATETIME NOT NULL AFTER `text`;"
}
func (A) TableName() string {
	return "`a`"
}
func (A) InsertVarStmt() string {
	return "(?,?,?)"
}
func (A) Columns() []string {
	return []string{"`id`", "`text`", "`created_at`"}
}
func (v A) Values() []any {
	return []any{string(v.ID), string(v.Text), time.Time(v.CreatedAt)}
}
func (v *A) Addrs() []any {
	return []any{types.String(&v.ID), types.String(&v.Text), (*time.Time)(&v.CreatedAt)}
}
func (v A) Get_ID() sequel.ColumnValuer[string] {
	return sequel.Column[string]("`id`", v.ID, func(vi string) driver.Value { return string(vi) })
}
func (v A) Get_Text() sequel.ColumnValuer[LongText] {
	return sequel.Column[LongText]("`text`", v.Text, func(vi LongText) driver.Value { return string(vi) })
}
func (v A) Get_CreatedAt() sequel.ColumnValuer[time.Time] {
	return sequel.Column[time.Time]("`created_at`", v.CreatedAt, func(vi time.Time) driver.Value { return time.Time(vi) })
}

func (v B) CreateTableStmt() string {
	return "CREATE TABLE IF NOT EXISTS " + v.TableName() + " (`id` VARCHAR(255) NOT NULL,`created_at` DATETIME NOT NULL);"
}
func (B) AlterTableStmt() string {
	return "ALTER TABLE `b` MODIFY `id` VARCHAR(255) NOT NULL,MODIFY `created_at` DATETIME NOT NULL AFTER `id`;"
}
func (B) TableName() string {
	return "`b`"
}
func (B) InsertVarStmt() string {
	return "(?,?)"
}
func (B) Columns() []string {
	return []string{"`id`", "`created_at`"}
}
func (v B) Values() []any {
	return []any{string(v.ID), time.Time(v.CreatedAt)}
}
func (v *B) Addrs() []any {
	return []any{types.String(&v.ID), (*time.Time)(&v.CreatedAt)}
}
func (v B) Get_ID() sequel.ColumnValuer[string] {
	return sequel.Column[string]("`id`", v.ID, func(vi string) driver.Value { return string(vi) })
}
func (v B) Get_CreatedAt() sequel.ColumnValuer[time.Time] {
	return sequel.Column[time.Time]("`created_at`", v.CreatedAt, func(vi time.Time) driver.Value { return time.Time(vi) })
}

func (v C) CreateTableStmt() string {
	return "CREATE TABLE IF NOT EXISTS " + v.TableName() + " (`id` BIGINT NOT NULL,PRIMARY KEY (`id`));"
}
func (C) AlterTableStmt() string {
	return "ALTER TABLE `c` MODIFY `id` BIGINT NOT NULL;"
}
func (C) TableName() string {
	return "`c`"
}
func (C) InsertVarStmt() string {
	return "(?)"
}
func (C) Columns() []string {
	return []string{"`id`"}
}
func (v C) IsAutoIncr() bool {
	return false
}
func (v C) PK() (columnName string, pos int, value driver.Value) {
	return "`id`", 0, int64(v.ID)
}
func (v C) Values() []any {
	return []any{int64(v.ID)}
}
func (v *C) Addrs() []any {
	return []any{types.Integer(&v.ID)}
}
func (v C) Get_ID() sequel.ColumnValuer[int64] {
	return sequel.Column[int64]("`id`", v.ID, func(vi int64) driver.Value { return int64(vi) })
}

func (v D) CreateTableStmt() string {
	return "CREATE TABLE IF NOT EXISTS " + v.TableName() + " (`id` VARCHAR(255) NOT NULL,PRIMARY KEY (`id`));"
}
func (D) AlterTableStmt() string {
	return "ALTER TABLE `d` MODIFY `id` VARCHAR(255) NOT NULL;"
}
func (D) TableName() string {
	return "`d`"
}
func (D) InsertVarStmt() string {
	return "(?)"
}
func (D) Columns() []string {
	return []string{"`id`"}
}
func (v D) IsAutoIncr() bool {
	return false
}
func (v D) PK() (columnName string, pos int, value driver.Value) {
	return "`id`", 0, (driver.Valuer)(v.ID)
}
func (v D) Values() []any {
	return []any{(driver.Valuer)(v.ID)}
}
func (v *D) Addrs() []any {
	return []any{(sql.Scanner)(&v.ID)}
}
func (v D) Get_ID() sequel.ColumnValuer[sql.NullString] {
	return sequel.Column[sql.NullString]("`id`", v.ID, func(vi sql.NullString) driver.Value { return (driver.Valuer)(vi) })
}
