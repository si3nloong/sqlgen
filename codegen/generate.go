package codegen

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"text/template"

	"github.com/si3nloong/sqlgen/codegen/config"
	"github.com/si3nloong/sqlgen/codegen/templates"
	"github.com/si3nloong/sqlgen/sequel"
	"github.com/si3nloong/sqlgen/sequel/strpool"
	"golang.org/x/tools/imports"
)

func Init(cfg *config.Config) error {
	tmpl, err := template.ParseFS(codegenTemplates, "templates/init.yml.go.tpl")
	if err != nil {
		return err
	}

	w, err := os.OpenFile(config.DefaultConfigFile, os.O_RDWR|os.O_CREATE|os.O_TRUNC, fileMode)
	if err != nil {
		return err
	}
	defer w.Close()

	if err := tmpl.Execute(w, cfg); err != nil {
		return err
	}
	return nil
}

func renderTemplate[T templates.ModelTmplParams | struct{}](
	tmplName string,
	skipHeader bool,
	dialect sequel.Dialect,
	pkgPath string,
	pkgName string,
	getter string,
	dstDir string,
	dstFilename string,
	params T,
) error {
	w, blr := strpool.AcquireString(), strpool.AcquireString()
	defer func() {
		strpool.ReleaseString(w)
		strpool.ReleaseString(blr)
	}()

	quote := strconv.Quote
	switch dialect.Driver() {
	case "postgres", "sqlite":
		quote = func(s string) string {
			return "`" + s + "`"
		}
	}

	impPkg := NewPackage(pkgPath, pkgName)
	tmpl, err := template.New(tmplName).Funcs(template.FuncMap{
		"quote":             quote,
		"createTable":       createTableStmt(dialect),
		"alterTable":        alterTableStmt(dialect),
		"insertOneStmt":     insertOneStmt(dialect),
		"findByPKStmt":      findByPKStmt(dialect),
		"reserveImport":     reserveImport(impPkg),
		"castAs":            castAs(impPkg),
		"addrOf":            addrOf(impPkg),
		"wrap":              dialect.Wrap,
		"getFieldTypeValue": getFieldTypeValue(impPkg, getter),
		"varStmt":           varStmt(dialect),
		"var":               dialect.Var,
	}).ParseFS(codegenTemplates, "templates/"+tmplName)
	if err != nil {
		return err
	}

	if err := tmpl.Execute(blr, params); err != nil {
		return err
	}

	if !skipHeader {
		w.WriteString(fmt.Sprintf("// Code generated by sqlgen, version %s. DO NOT EDIT.\n\n", sequel.Version))
	}

	w.WriteString("package " + pkgName + "\n\n")

	if len(impPkg.imports) > 0 {
		w.WriteString("import (\n")
		for _, pkg := range impPkg.imports {
			if filepath.Base(pkg.Path()) == pkg.Name() {
				w.WriteString("\t" + strconv.Quote(pkg.Path()) + "\n")
			} else {
				w.WriteString("\t" + pkg.Name() + " " + strconv.Quote(pkg.Path()) + "\n")
			}
		}
		w.WriteString(")\n")
	}
	w.WriteString(blr.String())

	os.MkdirAll(dstDir, fileMode)
	fileDest := filepath.Join(dstDir, dstFilename)
	formatted, err := imports.Process(fileDest, []byte(w.String()), &imports.Options{Comments: true})
	if err != nil {
		return err
	}
	blr.Reset()
	w.Reset()

	log.Println("Creating " + fileDest)
	if err := os.WriteFile(fileDest, formatted, fileMode); err != nil {
		return err
	}
	return nil
}
